// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should pass snapshot test 1`] = `
<View
  style={
    Object {
      "flex": 1,
      "height": 1334,
    }
  }
  virtual={undefined}
>
  <RCTScrollView
    automaticallyAdjustContentInsets={false}
    contentContainerStyle={undefined}
    contentInset={
      Object {
        "bottom": 0,
      }
    }
    enableAutoAutomaticScroll={true}
    enableResetScrollToCoords={true}
    extraHeight={75}
    extraScrollHeight={0}
    getScrollResponder={[Function]}
    handleOnScroll={[Function]}
    keyboardDismissMode="interactive"
    keyboardOpeningTime={250}
    keyboardShouldPersistTaps="handled"
    keyboardSpace={0}
    onScroll={[Function]}
    resetKeyboardSpace={[Function]}
    resetScrollToCoords={
      Object {
        "x": 0,
        "y": 0,
      }
    }
    scrollEventThrottle={1}
    scrollForExtraHeightOnAndroid={[Function]}
    scrollToEnd={[Function]}
    scrollToFocusedInput={[Function]}
    scrollToPosition={[Function]}
    showsVerticalScrollIndicator={true}
    style={
      Object {
        "backgroundColor": "transparent",
        "flex": 1,
      }
    }
    viewIsInsideTabBar={false}
    virtual={undefined}
  >
    <View>
      <View
        closeOnRowBeginSwipe={false}
        closeOnRowPress={true}
        closeOnScroll={true}
        directionalDistanceChangeThreshold={2}
        disableLeftSwipe={false}
        disableRightSwipe={false}
        leftOpenValue={0}
        previewFirstRow={false}
        recalculateHiddenLayout={false}
        rightOpenValue={0}
        style={Object {}}
        swipeToOpenPercent={50}
        virtual={undefined}
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={null}
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            button={true}
            onPress={[Function]}
            style={
              Object {
                "alignItems": "center",
                "backgroundColor": "transparent",
                "borderBottomWidth": 0.5,
                "borderColor": "#c9c9c9",
                "flexDirection": "row",
                "marginLeft": 16,
                "paddingBottom": 13,
                "paddingRight": 16,
                "paddingTop": 13,
              }
            }
            virtual={undefined}
          >
            <View
              style={
                Object {
                  "alignItems": "flex-start",
                  "alignSelf": "center",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
              virtual={undefined}
            >
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Object {
                    "alignSelf": "center",
                    "color": "#000",
                    "fontFamily": "System",
                    "fontSize": 16,
                  }
                }
                uppercase={false}
                virtual={undefined}
              >
                test repo
                

                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  note={true}
                  style={
                    Object {
                      "color": "#a7a7a7",
                      "fontFamily": "System",
                      "fontSize": 14,
                    }
                  }
                  uppercase={false}
                  virtual={undefined}
                >
                  foo bar
                </Text>
                


                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                    Object {
                      "color": "#000",
                      "fontFamily": "System",
                      "fontSize": 16,
                    }
                  }
                  uppercase={false}
                  virtual={undefined}
                >
                  <Text
                    accessible={true}
                    allowFontScaling={true}
                    ellipsizeMode="tail"
                  />
                   
                  a few seconds ago
                </Text>
              </Text>
            </View>
            <View
              style={
                Object {
                  "alignItems": "flex-end",
                  "alignSelf": "center",
                  "flex": 0.28,
                  "paddingBottom": null,
                  "paddingLeft": null,
                  "paddingRight": null,
                  "paddingTop": null,
                }
              }
              virtual={undefined}
            >
              <View
                accessibilityComponentType={undefined}
                accessibilityLabel={undefined}
                accessibilityTraits={undefined}
                accessible={true}
                collapsable={undefined}
                hasTVPreferredFocus={undefined}
                hitSlop={undefined}
                isTVSelectable={true}
                nativeID={undefined}
                onLayout={undefined}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "alignItems": "center",
                    "alignSelf": null,
                    "backgroundColor": null,
                    "borderBottomWidth": null,
                    "borderColor": "#007aff",
                    "borderLeftWidth": null,
                    "borderRadius": 5,
                    "borderRightWidth": null,
                    "borderTopWidth": null,
                    "elevation": 0,
                    "flexDirection": "row",
                    "height": 45,
                    "justifyContent": "space-between",
                    "opacity": 1,
                    "paddingBottom": 6,
                    "paddingTop": 6,
                    "shadowColor": null,
                    "shadowOffset": null,
                    "shadowOpacity": null,
                    "shadowRadius": null,
                  }
                }
                testID={undefined}
                tvParallaxProperties={undefined}
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                />
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </RCTScrollView>
  <Modal
    animationType="none"
    hardwareAccelerated={false}
    hideModalContentWhileAnimating={false}
    onModalHide={[Function]}
    onRequestClose={[Function]}
    swipeThreshold={100}
    transparent={true}
    visible={false}
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hitSlop={undefined}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "black",
          "bottom": 0,
          "height": 1334,
          "left": 0,
          "opacity": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
          "width": 750,
        }
      }
      testID={undefined}
    />
    <View
      collapsable={undefined}
      hideModalContentWhileAnimating={false}
      onModalHide={[Function]}
      pointerEvents="box-none"
      style={
        Object {
          "flex": 1,
          "justifyContent": "center",
          "margin": 37.5,
          "transform": Array [
            Object {
              "translateY": 0,
            },
          ],
        }
      }
      swipeThreshold={100}
    >
      <View />
    </View>
  </Modal>
</View>
`;
